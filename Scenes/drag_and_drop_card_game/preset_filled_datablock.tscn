[gd_scene load_steps=4 format=3 uid="uid://ch5ugrigbvrxb"]

[ext_resource type="Texture2D" uid="uid://cr074s8vk64mm" path="res://Scenes/drag_and_drop_card_game/datablock_images/datablock.png" id="2_blob8"]

[sub_resource type="GDScript" id="GDScript_j27ww"]
script/source = "# preset_datablock.gd
# Description: preset_datablocks are different from datablocks. 
# They represent the partially filled out portion of the data table. 
# Their position and values matter for data validation. This level 1 script 
# prints data from bug_database.gd onto preset_datablocks which already exist 
# in drag_drop_main.tscn. These entities cannot be moved by the player, but 
# clicking on these blocks shows an image of the bug sprite that the row represents.

extends Node2D

var bug_database_ref = preload(\"res://scripts/bug_database.gd\").new()

@onready var text_label = $preset_datablock_text
@export var max_font_size: int = 24
@export var min_font_size: int = 10
@export var max_width: int = 60

# Font path
const FONT_PATH = \"res://assets/fonts/Roboto-Regular.ttf\"

var display_text = \"\"

# waits for initialization and calls update_text and set_text.
func _ready():
	await get_tree().process_frame  # Ensure nodes are initialized
	update_text()
	set_text()


# accesses a globally grouped set of \"preset_datablocks\" to apply text values to their RichTextLabels.
func update_text():
	var block_name
	if !is_in_group(\"preset_datablocks\"):
		block_name = name  # Get the name of the node (e.g., \"preset_datablock_r0c0\")
		print(\"PRESET_DATABLOCK NOT FOUND: \", block_name)
	else:
		block_name = name  # Get the name of the node (e.g., \"preset_datablock_r0c0\")
		# print(block_name)

		# Extract row and column indices from the block name using split()
		var parts = block_name.split(\"_r\")  # [\"preset_datablock\", \"0c0\"]
		if parts.size() > 1:
			var row_col = parts[1].split(\"c\")  # [\"0\", \"0\"]
			if row_col.size() > 1:
				var row = int(row_col[0])
				var col = int(row_col[1])
				# First row: Set column headers
				if row == 0:
					var fields = bug_database_ref.preset_bug_data[\"FIELDS\"]
					if col < fields.size():
						text_label.text = \"[center]\" + fields[col] + \"[/center]\"
				# Second row: Fill in all data for FIZZGIG the example bug
				elif row == 1:
					var example_bug = bug_database_ref.preset_bug_data[\"EXAMPLE_BUG\"]
					if col < example_bug.size():
						text_label.text = \"[center]\" + example_bug[col] + \"[/center]\"
				# Fill in the rest of the first column with bug names
				elif row >= 2 and col == 0:
					var name_list = bug_database_ref.get_bug_names()
					if row - 2 < name_list.size():
						text_label.text = \"[center]\" + name_list[row - 2] + \"[/center]\"
						

# Dynamic text sizing (similar to your datablock implementation)
func set_text():
	var font = load(FONT_PATH)
	if not font:
		print(\"Error: Font not found at\", FONT_PATH)
		return

	text_label.add_theme_font_override(\"font\", font)
	text_label.add_theme_font_size_override(\"normal_font_size\", min_font_size)
	
	var font_size = max_font_size
	var full_text = display_text if display_text else text_label.text
	
	# Add center formatting if not already present
	if not full_text.begins_with(\"[center]\"):
		full_text = \"[center]\" + full_text + \"[/center]\"
	
	# Adjust font size dynamically
	while font_size >= min_font_size:
		text_label.add_theme_font_override(\"font\", font)
		text_label.add_theme_font_size_override(\"normal_font_size\", font_size)

		# Calculate the width of the text with the current font size
		var text_width = font.get_string_size(full_text, font_size).x
		
		if text_width > max_width:
			font_size -= 1
		else:
			break
	
	text_label.text = full_text
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_n7gfs"]
size = Vector2(64, 32)

[node name="preset_datablock" type="Node2D"]
position = Vector2(29, 16)
scale = Vector2(0.95, 0.95)
script = SubResource("GDScript_j27ww")

[node name="preset_datablock_image" type="Sprite2D" parent="."]
scale = Vector2(0.95, 0.95)
texture = ExtResource("2_blob8")

[node name="Area2D" type="Area2D" parent="."]
scale = Vector2(0.95, 0.95)
collision_layer = 4
collision_mask = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
scale = Vector2(0.95, 0.95)
shape = SubResource("RectangleShape2D_n7gfs")

[node name="preset_datablock_text" type="RichTextLabel" parent="."]
modulate = Color(0, 0, 0, 1)
offset_left = -25.0
offset_top = -13.0
offset_right = 30.0
offset_bottom = 13.0
bbcode_enabled = true
text = "text"
fit_content = true
scroll_active = false
